import { isNode } from './ast'
import { getOptionsFromNode } from "./helpers";

/**
 * rendering the ast into vue render functions
 * @param {*} ast AST generated by html-parse-stringify
 * @param {*} config our configuration
 * @param {*} createElement vue's createElement
 * @param {*} context vue functional component context
 */
export const renderer = (ast, config, h, attrs) => {
  const _render = (node, parent, key, index) => {
    if (Array.isArray(node)) {
      const nodes = []
      // node is an array
      node.forEach((subnode, index) => {
        nodes.push(_render(subnode, node, null, index))
      })
      return nodes
    } else if (isNode(node)) {
      // node is either a node with children or a node or a text node
      if (node.type === 'text') {
        return config.textTransformer(node.content) // return text
      }

      if (node.type === 'tag') {
        const children = []
        node.children.forEach((child, index) => {
          children.push(_render(child, node, null, index))
        })

        // if tag name is provided in extraComponentsMap, use that component
        const tagName = node.name.toLowerCase();
        if (typeof config.extraComponentsMap[tagName] !== 'undefined') {
          const Component = config.extraComponentsMap[tagName];
          return h(
            Component,
            {
              ...getOptionsFromNode(node),
              ...attrs, // pass down attributes
            },
            () => [...children]
          )
        }

        // else, create normal html element
        return h(
          tagName,
          getOptionsFromNode(node),
          [...children]
        )
      }
    }
  }

  return h("div", {}, _render(ast, null, null, 0))
}