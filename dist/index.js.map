{"mappings":"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","sources":["index.js","src/ast.js","src/helpers.js","src/renderer.js"],"sourcesContent":["import { generateAST, rectifyAST } from \"./src/ast\";\nimport { renderer } from \"./src/renderer\";\n\nconst defaultConfig = {\n  container: {\n    type: 'div'\n  },\n  extraComponentsMap: {},\n  renderAnyway: false,\n  textTransformer: text => text\n}\n\nexport function renderHtml (html, config, h) {\n  const _c = Object.assign(defaultConfig, config)\n  const _ast = generateAST(html)\n  const _rectifiedAst = rectifyAST(_ast, config)\n\n  return renderer(_rectifiedAst, _c, h)\n}\n\nexport { getOptionsFromNode } from \"./src/helpers\"","import { cloneDeep } from \"./helpers\";\nconst parser = require('html-parse-stringify2')\n\n/**\n * Visit each node in the AST - with callback (adapted from https://lihautan.com/manipulating-ast-with-javascript/)\n * @param {*} ast html-parse-stringify AST\n * @param {*} callback\n */\nfunction _visitAST (ast, callback) {\n  function _visit(node, parent, key, index) {\n    callback(node, parent, key, index)\n    if (Array.isArray(node)) {\n      // node is an array\n      node.forEach((value, index) => {\n        _visit.call(this, value, node, null, index)\n      })\n    } else if (isNode(node)) {\n      const keys = Object.keys(node)\n      for (let i = 0; i < keys.length; i++) {\n        const child = node[keys[i]]\n        if (Array.isArray(child)) {\n          for (let j = 0; j < child.length; j++) {\n            _visit.call(this, child[j], node, key, j)\n          }\n        } else if (isNode(child)) {\n          _visit.call(this, child, node, key)\n        }\n      }\n    }\n  }\n  _visit.call(this, ast, null)\n}\n\n/**\n *\n * @param node html-parse-stringify AST node\n * @returns {boolean|boolean}\n */\nexport function isNode(node) {\n  return typeof node === 'object' && typeof node.type !== 'undefined'\n}\n\nexport function generateAST (html) {\n  return parser.parse(html)\n}\n\n/**\n * Converts ast html nodes in vue components\n * @param ast\n * @param config\n * @returns {*}\n */\nexport function rectifyAST (ast, config) {\n  const _ast = cloneDeep(ast)\n  const keys = config.extraComponentsMap ? Object.keys(config.extraComponentsMap) : [];\n  _visitAST(_ast, (node, parent, key, index) => {\n    // checking whether the AST has some components that has to become Vue Components\n    for (let i = 0; i < keys.length; i++) {\n      const currentKey = keys[i]\n      if (config.extraComponentsMap[currentKey].conditions(node)) {\n        node.name = currentKey\n      }\n    }\n  })\n  return _ast\n}","/**\n * Simple clone\n * @param obj\n * @returns {any}\n */\nexport function cloneDeep (obj) {\n  return JSON.parse(JSON.stringify(obj))\n}\n\n/**\n * Get vue-complient options from node attributes\n * @param node\n * @returns {{style: String, class: String, attrs: Object}}\n */\nexport function getOptionsFromNode(node) {\n  return cloneDeep(node.attrs);\n}","import { isNode } from './ast'\nimport { getOptionsFromNode } from \"./helpers\";\n\n/**\n * rendering the ast into vue render functions\n * @param {*} ast AST generated by html-parse-stringify\n * @param {*} config our configuration\n * @param {*} createElement vue's createElement\n * @param {*} context vue functional component context\n */\nexport function renderer (ast, config, h) {\n  function _render(node, parent, key, index) {\n    if (Array.isArray(node)) {\n      const nodes = []\n      // node is an array\n      node.forEach((subnode, index) => {\n        nodes.push(_render(subnode, node, null, index))\n      })\n      return nodes\n    } else if (isNode(node)) {\n      // node is either a node with children or a node or a text node\n      if (node.type === 'text') {\n        return config.textTransformer(node.content) // return text\n      }\n      if (node.type === 'tag') {\n        const children = []\n        node.children.forEach((child, index) => {\n          children.push(_render(child, node, null, index))\n        })\n\n        // if it's an extra component use custom renderer\n        if (typeof config.config.extraComponentsMap[node.name] !== 'undefined') {\n          const comp = config.config.extraComponentsMap[node.name];\n          return h(\n            comp,\n            getOptionsFromNode(node),\n            [...children]\n          )\n        }\n        // else, create normal html element\n        return h(\n          node.name,\n          getOptionsFromNode(node),\n          [...children]\n        )\n      }\n    }\n  }\n\n  return () => h(\"div\", {}, _render(ast, null, null, 0))\n}"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}